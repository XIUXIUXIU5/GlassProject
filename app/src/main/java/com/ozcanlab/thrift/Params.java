/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ozcanlab.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Params implements org.apache.thrift.TBase<Params, Params._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Params");

  private static final org.apache.thrift.protocol.TField RDT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rdt_type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GOOGLE_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("google_account", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PICTURE_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("picture_ext", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ALS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("als_value", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField LOCATION_LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("location_lat", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField LOCATION_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("location_long", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ParamsTupleSchemeFactory());
  }

  public String rdt_type; // required
  public String google_account; // required
  public String picture_ext; // required
  public double als_value; // required
  public double location_lat; // required
  public double location_long; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RDT_TYPE((short)1, "rdt_type"),
    GOOGLE_ACCOUNT((short)2, "google_account"),
    PICTURE_EXT((short)3, "picture_ext"),
    ALS_VALUE((short)4, "als_value"),
    LOCATION_LAT((short)5, "location_lat"),
    LOCATION_LONG((short)6, "location_long");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RDT_TYPE
          return RDT_TYPE;
        case 2: // GOOGLE_ACCOUNT
          return GOOGLE_ACCOUNT;
        case 3: // PICTURE_EXT
          return PICTURE_EXT;
        case 4: // ALS_VALUE
          return ALS_VALUE;
        case 5: // LOCATION_LAT
          return LOCATION_LAT;
        case 6: // LOCATION_LONG
          return LOCATION_LONG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALS_VALUE_ISSET_ID = 0;
  private static final int __LOCATION_LAT_ISSET_ID = 1;
  private static final int __LOCATION_LONG_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RDT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rdt_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOOGLE_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("google_account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_EXT, new org.apache.thrift.meta_data.FieldMetaData("picture_ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("als_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOCATION_LAT, new org.apache.thrift.meta_data.FieldMetaData("location_lat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOCATION_LONG, new org.apache.thrift.meta_data.FieldMetaData("location_long", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Params.class, metaDataMap);
  }

  public Params() {
  }

  public Params(
    String rdt_type,
    String google_account,
    String picture_ext,
    double als_value,
    double location_lat,
    double location_long)
  {
    this();
    this.rdt_type = rdt_type;
    this.google_account = google_account;
    this.picture_ext = picture_ext;
    this.als_value = als_value;
    setAls_valueIsSet(true);
    this.location_lat = location_lat;
    setLocation_latIsSet(true);
    this.location_long = location_long;
    setLocation_longIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Params(Params other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRdt_type()) {
      this.rdt_type = other.rdt_type;
    }
    if (other.isSetGoogle_account()) {
      this.google_account = other.google_account;
    }
    if (other.isSetPicture_ext()) {
      this.picture_ext = other.picture_ext;
    }
    this.als_value = other.als_value;
    this.location_lat = other.location_lat;
    this.location_long = other.location_long;
  }

  public Params deepCopy() {
    return new Params(this);
  }

  @Override
  public void clear() {
    this.rdt_type = null;
    this.google_account = null;
    this.picture_ext = null;
    setAls_valueIsSet(false);
    this.als_value = 0.0;
    setLocation_latIsSet(false);
    this.location_lat = 0.0;
    setLocation_longIsSet(false);
    this.location_long = 0.0;
  }

  public String getRdt_type() {
    return this.rdt_type;
  }

  public Params setRdt_type(String rdt_type) {
    this.rdt_type = rdt_type;
    return this;
  }

  public void unsetRdt_type() {
    this.rdt_type = null;
  }

  /** Returns true if field rdt_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRdt_type() {
    return this.rdt_type != null;
  }

  public void setRdt_typeIsSet(boolean value) {
    if (!value) {
      this.rdt_type = null;
    }
  }

  public String getGoogle_account() {
    return this.google_account;
  }

  public Params setGoogle_account(String google_account) {
    this.google_account = google_account;
    return this;
  }

  public void unsetGoogle_account() {
    this.google_account = null;
  }

  /** Returns true if field google_account is set (has been assigned a value) and false otherwise */
  public boolean isSetGoogle_account() {
    return this.google_account != null;
  }

  public void setGoogle_accountIsSet(boolean value) {
    if (!value) {
      this.google_account = null;
    }
  }

  public String getPicture_ext() {
    return this.picture_ext;
  }

  public Params setPicture_ext(String picture_ext) {
    this.picture_ext = picture_ext;
    return this;
  }

  public void unsetPicture_ext() {
    this.picture_ext = null;
  }

  /** Returns true if field picture_ext is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture_ext() {
    return this.picture_ext != null;
  }

  public void setPicture_extIsSet(boolean value) {
    if (!value) {
      this.picture_ext = null;
    }
  }

  public double getAls_value() {
    return this.als_value;
  }

  public Params setAls_value(double als_value) {
    this.als_value = als_value;
    setAls_valueIsSet(true);
    return this;
  }

  public void unsetAls_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALS_VALUE_ISSET_ID);
  }

  /** Returns true if field als_value is set (has been assigned a value) and false otherwise */
  public boolean isSetAls_value() {
    return EncodingUtils.testBit(__isset_bitfield, __ALS_VALUE_ISSET_ID);
  }

  public void setAls_valueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALS_VALUE_ISSET_ID, value);
  }

  public double getLocation_lat() {
    return this.location_lat;
  }

  public Params setLocation_lat(double location_lat) {
    this.location_lat = location_lat;
    setLocation_latIsSet(true);
    return this;
  }

  public void unsetLocation_lat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATION_LAT_ISSET_ID);
  }

  /** Returns true if field location_lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation_lat() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCATION_LAT_ISSET_ID);
  }

  public void setLocation_latIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATION_LAT_ISSET_ID, value);
  }

  public double getLocation_long() {
    return this.location_long;
  }

  public Params setLocation_long(double location_long) {
    this.location_long = location_long;
    setLocation_longIsSet(true);
    return this;
  }

  public void unsetLocation_long() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATION_LONG_ISSET_ID);
  }

  /** Returns true if field location_long is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation_long() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCATION_LONG_ISSET_ID);
  }

  public void setLocation_longIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATION_LONG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RDT_TYPE:
      if (value == null) {
        unsetRdt_type();
      } else {
        setRdt_type((String)value);
      }
      break;

    case GOOGLE_ACCOUNT:
      if (value == null) {
        unsetGoogle_account();
      } else {
        setGoogle_account((String)value);
      }
      break;

    case PICTURE_EXT:
      if (value == null) {
        unsetPicture_ext();
      } else {
        setPicture_ext((String)value);
      }
      break;

    case ALS_VALUE:
      if (value == null) {
        unsetAls_value();
      } else {
        setAls_value((Double)value);
      }
      break;

    case LOCATION_LAT:
      if (value == null) {
        unsetLocation_lat();
      } else {
        setLocation_lat((Double)value);
      }
      break;

    case LOCATION_LONG:
      if (value == null) {
        unsetLocation_long();
      } else {
        setLocation_long((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RDT_TYPE:
      return getRdt_type();

    case GOOGLE_ACCOUNT:
      return getGoogle_account();

    case PICTURE_EXT:
      return getPicture_ext();

    case ALS_VALUE:
      return Double.valueOf(getAls_value());

    case LOCATION_LAT:
      return Double.valueOf(getLocation_lat());

    case LOCATION_LONG:
      return Double.valueOf(getLocation_long());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RDT_TYPE:
      return isSetRdt_type();
    case GOOGLE_ACCOUNT:
      return isSetGoogle_account();
    case PICTURE_EXT:
      return isSetPicture_ext();
    case ALS_VALUE:
      return isSetAls_value();
    case LOCATION_LAT:
      return isSetLocation_lat();
    case LOCATION_LONG:
      return isSetLocation_long();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Params)
      return this.equals((Params)that);
    return false;
  }

  public boolean equals(Params that) {
    if (that == null)
      return false;

    boolean this_present_rdt_type = true && this.isSetRdt_type();
    boolean that_present_rdt_type = true && that.isSetRdt_type();
    if (this_present_rdt_type || that_present_rdt_type) {
      if (!(this_present_rdt_type && that_present_rdt_type))
        return false;
      if (!this.rdt_type.equals(that.rdt_type))
        return false;
    }

    boolean this_present_google_account = true && this.isSetGoogle_account();
    boolean that_present_google_account = true && that.isSetGoogle_account();
    if (this_present_google_account || that_present_google_account) {
      if (!(this_present_google_account && that_present_google_account))
        return false;
      if (!this.google_account.equals(that.google_account))
        return false;
    }

    boolean this_present_picture_ext = true && this.isSetPicture_ext();
    boolean that_present_picture_ext = true && that.isSetPicture_ext();
    if (this_present_picture_ext || that_present_picture_ext) {
      if (!(this_present_picture_ext && that_present_picture_ext))
        return false;
      if (!this.picture_ext.equals(that.picture_ext))
        return false;
    }

    boolean this_present_als_value = true;
    boolean that_present_als_value = true;
    if (this_present_als_value || that_present_als_value) {
      if (!(this_present_als_value && that_present_als_value))
        return false;
      if (this.als_value != that.als_value)
        return false;
    }

    boolean this_present_location_lat = true;
    boolean that_present_location_lat = true;
    if (this_present_location_lat || that_present_location_lat) {
      if (!(this_present_location_lat && that_present_location_lat))
        return false;
      if (this.location_lat != that.location_lat)
        return false;
    }

    boolean this_present_location_long = true;
    boolean that_present_location_long = true;
    if (this_present_location_long || that_present_location_long) {
      if (!(this_present_location_long && that_present_location_long))
        return false;
      if (this.location_long != that.location_long)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Params other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Params typedOther = (Params)other;

    lastComparison = Boolean.valueOf(isSetRdt_type()).compareTo(typedOther.isSetRdt_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRdt_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rdt_type, typedOther.rdt_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoogle_account()).compareTo(typedOther.isSetGoogle_account());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoogle_account()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.google_account, typedOther.google_account);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture_ext()).compareTo(typedOther.isSetPicture_ext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture_ext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture_ext, typedOther.picture_ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAls_value()).compareTo(typedOther.isSetAls_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAls_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.als_value, typedOther.als_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation_lat()).compareTo(typedOther.isSetLocation_lat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation_lat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location_lat, typedOther.location_lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation_long()).compareTo(typedOther.isSetLocation_long());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation_long()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location_long, typedOther.location_long);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Params(");
    boolean first = true;

    sb.append("rdt_type:");
    if (this.rdt_type == null) {
      sb.append("null");
    } else {
      sb.append(this.rdt_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("google_account:");
    if (this.google_account == null) {
      sb.append("null");
    } else {
      sb.append(this.google_account);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture_ext:");
    if (this.picture_ext == null) {
      sb.append("null");
    } else {
      sb.append(this.picture_ext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("als_value:");
    sb.append(this.als_value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("location_lat:");
    sb.append(this.location_lat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("location_long:");
    sb.append(this.location_long);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ParamsStandardSchemeFactory implements SchemeFactory {
    public ParamsStandardScheme getScheme() {
      return new ParamsStandardScheme();
    }
  }

  private static class ParamsStandardScheme extends StandardScheme<Params> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Params struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RDT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rdt_type = iprot.readString();
              struct.setRdt_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GOOGLE_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.google_account = iprot.readString();
              struct.setGoogle_accountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PICTURE_EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture_ext = iprot.readString();
              struct.setPicture_extIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.als_value = iprot.readDouble();
              struct.setAls_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCATION_LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.location_lat = iprot.readDouble();
              struct.setLocation_latIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOCATION_LONG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.location_long = iprot.readDouble();
              struct.setLocation_longIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Params struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rdt_type != null) {
        oprot.writeFieldBegin(RDT_TYPE_FIELD_DESC);
        oprot.writeString(struct.rdt_type);
        oprot.writeFieldEnd();
      }
      if (struct.google_account != null) {
        oprot.writeFieldBegin(GOOGLE_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.google_account);
        oprot.writeFieldEnd();
      }
      if (struct.picture_ext != null) {
        oprot.writeFieldBegin(PICTURE_EXT_FIELD_DESC);
        oprot.writeString(struct.picture_ext);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALS_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.als_value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION_LAT_FIELD_DESC);
      oprot.writeDouble(struct.location_lat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION_LONG_FIELD_DESC);
      oprot.writeDouble(struct.location_long);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ParamsTupleSchemeFactory implements SchemeFactory {
    public ParamsTupleScheme getScheme() {
      return new ParamsTupleScheme();
    }
  }

  private static class ParamsTupleScheme extends TupleScheme<Params> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Params struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRdt_type()) {
        optionals.set(0);
      }
      if (struct.isSetGoogle_account()) {
        optionals.set(1);
      }
      if (struct.isSetPicture_ext()) {
        optionals.set(2);
      }
      if (struct.isSetAls_value()) {
        optionals.set(3);
      }
      if (struct.isSetLocation_lat()) {
        optionals.set(4);
      }
      if (struct.isSetLocation_long()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRdt_type()) {
        oprot.writeString(struct.rdt_type);
      }
      if (struct.isSetGoogle_account()) {
        oprot.writeString(struct.google_account);
      }
      if (struct.isSetPicture_ext()) {
        oprot.writeString(struct.picture_ext);
      }
      if (struct.isSetAls_value()) {
        oprot.writeDouble(struct.als_value);
      }
      if (struct.isSetLocation_lat()) {
        oprot.writeDouble(struct.location_lat);
      }
      if (struct.isSetLocation_long()) {
        oprot.writeDouble(struct.location_long);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Params struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.rdt_type = iprot.readString();
        struct.setRdt_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.google_account = iprot.readString();
        struct.setGoogle_accountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.picture_ext = iprot.readString();
        struct.setPicture_extIsSet(true);
      }
      if (incoming.get(3)) {
        struct.als_value = iprot.readDouble();
        struct.setAls_valueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.location_lat = iprot.readDouble();
        struct.setLocation_latIsSet(true);
      }
      if (incoming.get(5)) {
        struct.location_long = iprot.readDouble();
        struct.setLocation_longIsSet(true);
      }
    }
  }

}

