/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ozcanlab.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Results implements org.apache.thrift.TBase<Results, Results._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Results");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTROL_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("control_line", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TEST_LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("test_lines", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResultsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResultsTupleSchemeFactory());
  }

  /**
   * 
   * @see Status
   */
  public Status status; // required
  /**
   * 
   * @see ControlLine
   */
  public ControlLine control_line; // required
  public List<Double> test_lines; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Status
     */
    STATUS((short)1, "status"),
    /**
     * 
     * @see ControlLine
     */
    CONTROL_LINE((short)2, "control_line"),
    TEST_LINES((short)3, "test_lines");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // CONTROL_LINE
          return CONTROL_LINE;
        case 3: // TEST_LINES
          return TEST_LINES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
    tmpMap.put(_Fields.CONTROL_LINE, new org.apache.thrift.meta_data.FieldMetaData("control_line", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ControlLine.class)));
    tmpMap.put(_Fields.TEST_LINES, new org.apache.thrift.meta_data.FieldMetaData("test_lines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Results.class, metaDataMap);
  }

  public Results() {
    this.status = com.ozcanlab.thrift.Status.PENDING;

  }

  public Results(
    Status status,
    ControlLine control_line,
    List<Double> test_lines)
  {
    this();
    this.status = status;
    this.control_line = control_line;
    this.test_lines = test_lines;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Results(Results other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetControl_line()) {
      this.control_line = other.control_line;
    }
    if (other.isSetTest_lines()) {
      List<Double> __this__test_lines = new ArrayList<Double>();
      for (Double other_element : other.test_lines) {
        __this__test_lines.add(other_element);
      }
      this.test_lines = __this__test_lines;
    }
  }

  public Results deepCopy() {
    return new Results(this);
  }

  @Override
  public void clear() {
    this.status = com.ozcanlab.thrift.Status.PENDING;

    this.control_line = null;
    this.test_lines = null;
  }

  /**
   * 
   * @see Status
   */
  public Status getStatus() {
    return this.status;
  }

  /**
   * 
   * @see Status
   */
  public Results setStatus(Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 
   * @see ControlLine
   */
  public ControlLine getControl_line() {
    return this.control_line;
  }

  /**
   * 
   * @see ControlLine
   */
  public Results setControl_line(ControlLine control_line) {
    this.control_line = control_line;
    return this;
  }

  public void unsetControl_line() {
    this.control_line = null;
  }

  /** Returns true if field control_line is set (has been assigned a value) and false otherwise */
  public boolean isSetControl_line() {
    return this.control_line != null;
  }

  public void setControl_lineIsSet(boolean value) {
    if (!value) {
      this.control_line = null;
    }
  }

  public int getTest_linesSize() {
    return (this.test_lines == null) ? 0 : this.test_lines.size();
  }

  public java.util.Iterator<Double> getTest_linesIterator() {
    return (this.test_lines == null) ? null : this.test_lines.iterator();
  }

  public void addToTest_lines(double elem) {
    if (this.test_lines == null) {
      this.test_lines = new ArrayList<Double>();
    }
    this.test_lines.add(elem);
  }

  public List<Double> getTest_lines() {
    return this.test_lines;
  }

  public Results setTest_lines(List<Double> test_lines) {
    this.test_lines = test_lines;
    return this;
  }

  public void unsetTest_lines() {
    this.test_lines = null;
  }

  /** Returns true if field test_lines is set (has been assigned a value) and false otherwise */
  public boolean isSetTest_lines() {
    return this.test_lines != null;
  }

  public void setTest_linesIsSet(boolean value) {
    if (!value) {
      this.test_lines = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    case CONTROL_LINE:
      if (value == null) {
        unsetControl_line();
      } else {
        setControl_line((ControlLine)value);
      }
      break;

    case TEST_LINES:
      if (value == null) {
        unsetTest_lines();
      } else {
        setTest_lines((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case CONTROL_LINE:
      return getControl_line();

    case TEST_LINES:
      return getTest_lines();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case CONTROL_LINE:
      return isSetControl_line();
    case TEST_LINES:
      return isSetTest_lines();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Results)
      return this.equals((Results)that);
    return false;
  }

  public boolean equals(Results that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_control_line = true && this.isSetControl_line();
    boolean that_present_control_line = true && that.isSetControl_line();
    if (this_present_control_line || that_present_control_line) {
      if (!(this_present_control_line && that_present_control_line))
        return false;
      if (!this.control_line.equals(that.control_line))
        return false;
    }

    boolean this_present_test_lines = true && this.isSetTest_lines();
    boolean that_present_test_lines = true && that.isSetTest_lines();
    if (this_present_test_lines || that_present_test_lines) {
      if (!(this_present_test_lines && that_present_test_lines))
        return false;
      if (!this.test_lines.equals(that.test_lines))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Results other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Results typedOther = (Results)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetControl_line()).compareTo(typedOther.isSetControl_line());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControl_line()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.control_line, typedOther.control_line);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTest_lines()).compareTo(typedOther.isSetTest_lines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTest_lines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.test_lines, typedOther.test_lines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Results(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("control_line:");
    if (this.control_line == null) {
      sb.append("null");
    } else {
      sb.append(this.control_line);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("test_lines:");
    if (this.test_lines == null) {
      sb.append("null");
    } else {
      sb.append(this.test_lines);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultsStandardSchemeFactory implements SchemeFactory {
    public ResultsStandardScheme getScheme() {
      return new ResultsStandardScheme();
    }
  }

  private static class ResultsStandardScheme extends StandardScheme<Results> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Results struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = Status.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTROL_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.control_line = ControlLine.findByValue(iprot.readI32());
              struct.setControl_lineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEST_LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.test_lines = new ArrayList<Double>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  double _elem2; // required
                  _elem2 = iprot.readDouble();
                  struct.test_lines.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTest_linesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Results struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.control_line != null) {
        oprot.writeFieldBegin(CONTROL_LINE_FIELD_DESC);
        oprot.writeI32(struct.control_line.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.test_lines != null) {
        oprot.writeFieldBegin(TEST_LINES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.test_lines.size()));
          for (double _iter3 : struct.test_lines)
          {
            oprot.writeDouble(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultsTupleSchemeFactory implements SchemeFactory {
    public ResultsTupleScheme getScheme() {
      return new ResultsTupleScheme();
    }
  }

  private static class ResultsTupleScheme extends TupleScheme<Results> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Results struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetControl_line()) {
        optionals.set(1);
      }
      if (struct.isSetTest_lines()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetControl_line()) {
        oprot.writeI32(struct.control_line.getValue());
      }
      if (struct.isSetTest_lines()) {
        {
          oprot.writeI32(struct.test_lines.size());
          for (double _iter4 : struct.test_lines)
          {
            oprot.writeDouble(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Results struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.status = Status.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.control_line = ControlLine.findByValue(iprot.readI32());
        struct.setControl_lineIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.test_lines = new ArrayList<Double>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            double _elem7; // required
            _elem7 = iprot.readDouble();
            struct.test_lines.add(_elem7);
          }
        }
        struct.setTest_linesIsSet(true);
      }
    }
  }

}

